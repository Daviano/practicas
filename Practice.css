h1 {
	font-family: cursive;
	color: #36648b;
	margin: auto;
	text-align: center;
}

td {
	padding: 10px;
}

table {
	text-align: center;
	padding: 1%;
	margin:1% 0 3% 18%;
}

form {
	text-align: center;
	padding: 3px;
	font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
	color: #222;
}
div {
	border-radius: 5px;
}

#header {
	height: 50px;
	background-color: #F38630;
	margin-bottom: 10px;
}

/*.left {
	height: 300px;
	width: 150px;
	background-color: #A7DBD8;
	float: left;
	margin-bottom: 10px;
}

.right {
	height: 300px;
	width: 450px;
	background-color: #E0E4CC;
	float: right;
	margin-bottom: 10px;
}*/

#footer {
	height: 50px;
	background-color: #69D2E7;
	clear: both;
}

/*
If you don't specify an element's positioning type, it defaults to static. This just means "where the element would normally go." If you don't tell an element how to position itself, it just plunks itself down in the document.
The first type of positioning is absolute positioning. When an element is set to position: absolute, it's then positioned in relation to the first parent element it has that doesn't have position: static. If there's no such element, the element with position: absolute gets positioned relative to <html>.
Relative positioning is more straightforward: it tells the element to move relative to where it would have landed if it just had the default static positioning.
If you give an element relative positioning and tell it to have a margin-top of 10px, it doesn't move down ten pixels from any particular thing—it moves down ten pixels from where it otherwise would have been.
Finally, fixed positioning anchors an element to the browser window—you can think of it as gluing the element to the screen. If you scroll up and down, the fixed element stays put even as other elements scroll past.
*/



